var data = '{"TargetFile": "/Users/admin/Codespaces/github/mcp-cli/temp/decode_proto.py", "CodeMarkdownLanguage": "python", "Instruction": "Adding better handling for potentially double-compressed messages", "CodeEdit": "import struct\\nimport subprocess\\nimport gzip\\nimport os\\n\\ndef is_gzip_compressed(data):\\n    return data.startswith(b\'\\\\x1f\\\\x8b\\\\x08\')\\n\\ndef decode_grpc_proto_from_file(filepath):\\n    if not os.path.exists(filepath):\\n        print(f\\"Error: File \'{filepath}\' not found.\\")\\n        return\\n\\n    try:\\n        with open(filepath, \\"rb\\") as f:\\n            data = f.read()\\n    except OSError as e:\\n        print(f\\"Error reading file \'{filepath}\': {e}\\")\\n        return\\n\\n    offset = 0\\n    message_index = 1\\n    while offset < len(data):\\n        if len(data) < offset + 5:\\n            print(f\\"Warning: Incomplete message {message_index}, file truncated?\\")\\n            break\\n\\n        compression_flag = data[offset]\\n        offset += 1\\n\\n        message_length = struct.unpack(\\">I\\", data[offset:offset + 4])[0]\\n        offset += 4\\n\\n        if len(data) < offset + message_length:\\n            print(f\\"Warning: Incomplete message {message_index}, file truncated?\\")\\n            break\\n\\n        message_data = data[offset:offset + message_length]\\n        offset += message_length\\n\\n        if compression_flag == 1:\\n            try:\\n                decompressed_message = gzip.decompress(message_data)\\n                # Check if the decompressed data is still gzip compressed\\n                if is_gzip_compressed(decompressed_message):\\n                    print(f\\"Message {message_index} appears to be double-compressed, attempting second decompression\\")\\n                    try:\\n                        decompressed_message = gzip.decompress(decompressed_message)\\n                    except (OSError, EOFError) as e:\\n                        print(f\\"Second decompression failed: {e}\\")\\n            except (OSError, EOFError) as e:\\n                print(f\\"Decompression error in message {message_index}: {e}\\")\\n                print(f\\"Raw compressed data: {message_data.hex()}\\")\\n                continue\\n        else:\\n            decompressed_message = message_data\\n            # Check if uncompressed data is actually gzip compressed\\n            if is_gzip_compressed(decompressed_message):\\n                print(f\\"Message {message_index} appears to be compressed but flag is 0, attempting decompression\\")\\n                try:\\n                    decompressed_message = gzip.decompress(decompressed_message)\\n                except (OSError, EOFError) as e:\\n                    print(f\\"Decompression failed: {e}\\")\\n\\n        try:\\n            # Pass binary data directly to protoc without decoding\\n            process = subprocess.run([\'protoc\', \'--decode_raw\'], input=decompressed_message, capture_output=True, text=False)\\n            if process.returncode == 0:\\n                decoded_output = process.stdout.decode(\'utf-8\', errors=\'replace\')\\n                print(f\\"Message {message_index}:\\\\n{decoded_output}\\")\\n            else:\\n                print(f\\"Protobuf decoding error in message {message_index}\\")\\n                print(f\\"Raw decompressed data: {decompressed_message.hex()}\\")\\n                if process.stderr:\\n                    print(f\\"protoc stderr: {process.stderr.decode(\'utf-8\', errors=\'replace\')}\\")\\n        except subprocess.SubprocessError as e:\\n            print(f\\"Error running protoc for message {message_index}: {e}\\")\\n            print(f\\"Raw decompressed data: {decompressed_message.hex()}\\")\\n        message_index += 1\\n\\n# Example usage with a file path\\nfile_path = \'/Users/admin/Codespaces/github/mcp-cli/temp/b2/4.res\'\\ndecode_grpc_proto_from_file(file_path)", "Blocking": true}'
console.log(JSON.parse(data))


